Lambda Calculus - Reductions #1
((λx.(x y))(λz.z))
((λz.z) y)
y

Lambda Calculus - Reductions #2
((λx.((λy.(x y))x))(λz.w))
((λy.((λz.w) y))(λz.w))
(λz.w) (λz.w)
w

Lambda Calculus - Reductions #3
((λx.(x x))(λx.(x x)))
((((λx.(x x)) (λx.(x x)))))
(λx.(x x)) (λx.(x x)) // back to the start point
CAN'T REDUCE

Lambda Calculus - Reductions #4
(λg.((λf.((λx.(f (x x)))(λx.(f (x x))))) g))
(λg.((λf.(((f ((λx.(f (x x))) (λx.(f (x x)))))))) g))
// It will expand infinitely (λx.(f (x x)))(λx.(f (x x)))
CAN'T REDUCE

Lambda Calculus - Evaluating Expressions #1
(λx.x+1)3
3+1
4

Lambda Calculus - Evaluating Expressions #2
(λx.x+1)((λy.y+2)3)
(λx.x+1)(3+2)
(λx.x+1)5
5+1
6

Lambda Calculus - Evaluating Expressions #3
λx.λy.x^(47)y
47
// See: https://en.wikipedia.org/wiki/Church_encoding#Church_numerals

Lambda Calculus - Evaluating Expressions #4
λx.λy.x(xy)
2
// See: https://en.wikipedia.org/wiki/Church_encoding#Church_numerals

Lambda Calculus - Evaluating Expressions #5
λx.λy.y
0
// See: https://en.wikipedia.org/wiki/Church_encoding#Church_numerals
